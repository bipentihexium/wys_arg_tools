algo default:
	__generator_leaf_var_chance__: 15
	__generator_leaf_num_range__:
		-30
		30
	__generator_expr_operations_max__: 5
	__generator_expr_leaf_unop_chance__: 4
	__generator_expr_leaf_binop_chance__: 7
	algo:
		index = rand{2} * (len(data) - 1)
		keyindex = rand{2} * (len(key) - 1)
		result = str(len(data))
		while not data.empty():
			index = randexpr{index}
			rot0(index, len(data))
			keyindex = randexpr{keyindex}
			rot0(keyindex, len(key))
			result.append(data[index])
			del data[index]
		return result

algo inv_hcstsbsh:
	__generator_leaf_var_chance__: 15
	__generator_leaf_num_range__:
		-30
		30
	__generator_expr_operations_max__: 5
	__generator_expr_leaf_unop_chance__: 4
	__generator_expr_leaf_binop_chance__: 7
	algo:
		index = rand{2} * (len(data) - 1)
		keyindex = rand{2} * (len(key) - 1)
		result = str(len(data), '-')
		for i in 0..len(data):
			skip = randexpr{..}
			skip %= len(data)-i
			if skip == 0:
				return result
			elif skip > 0:
				while skip > 0:
					index = (index+1) % len(data)
					if result[index] == '-':
						skip -= 1
			else:
				while skip < 0:
					index = (index+len(data) - 1) % len(data)
					if result[index] == '-':
						skip += 1
			keyindex = randexpr{keyindex}
			rot0(keyindex, len(key))
			result[index] = data[i]
		return result

algo test:
	__generator_leaf_var_chance__: 15
	__generator_leaf_num_range__:
		-30
		30
	__generator_expr_operations_max__: 5
	__generator_expr_leaf_unop_chance__: 4
	__generator_expr_leaf_binop_chance__: 7
	algo:
		result = data
		keyindex = rand{2} * (len(key) - 1)
		for index in 0..len(data):
			i2 = randexpr{index}
			rot0(i2, len(data))
			keyindex = randexpr{keyindex}
			rot0(keyindex, len(key))
			tmp = result[index]
			result[index] = result[i2]
			result[i2] = tmp
		return result

#algo two_key:
#	__generator_leaf_var_chance__: 15
#	__generator_leaf_num_range__:
#		-30
#		30
#	__generator_expr_operations_max__: 5
#	__generator_expr_leaf_unop_chance__: 4
#	__generator_expr_leaf_binop_chance__: 7
#	algo:
#		index = rand{2} * (len(data) - 1)
#		keyindex = rand{2} * (len(key) - 1)
#		keyindex2 = rand{2} * (len(key2) - 1)
#		result = str(len(data))
#		while not data.empty():
#			index = randexpr{index}
#			rot0(index, len(data))
#			keyindex = randexpr{keyindex}
#			rot0(keyindex, len(key))
#			keyindex2 = randexpr{keyindex2}
#			rot0(keyindex2, len(key2))
#			result.append(data[index])
#			del data[index]
#		return result

algo modk:
	__generator_leaf_var_chance__: 15
	__generator_leaf_num_range__:
		-30
		30
	__generator_expr_operations_max__: 5
	__generator_expr_leaf_unop_chance__: 4
	__generator_expr_leaf_binop_chance__: 7
	algo:
		newkey = str(len(key))
		for modindex in 0..len(key):
			index = key[modindex]
			a = randexpr{index}
			rot0(a, 26)
			newkey.append(chr(65+a))
		for modindex in 0..len(key):
			key[modindex] = newkey[modindex]
		index = 0
		keyindex = 0
		result = str(len(data))
		while not data.empty():
			index = randexpr{index}
			rot0(index, len(data))
			keyindex = randexpr{keyindex}
			rot0(keyindex, len(key))
			result.append(data[index])
			del data[index]
		return result
